generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id
  name      String
  email     String    @unique(map: "User_email_key")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  rooms     Room[]
  projects  Project[]
  messages  Message[]
  files     File[]
}

model Room {
  id        String   @id @default(uuid())
  name      String
  password  String
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], map: "Room_userId_fkey", onDelete: Cascade)

  files    File[]
  messages Message[]

  @@unique([name, userId], map: "room_name_userId_key")
}

model Message {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], map: "Message_userId_fkey", onDelete: Cascade)
  roomId String
  room   Room   @relation(fields: [roomId], references: [id], map: "Message_roomId_fkey", onDelete: Cascade)

  @@index([roomId], map: "Message_roomId_fkey")
}

model File {
  id        String   @id @default(uuid())
  roomId    String?
  projectId String?
  userId    String
  type      String
  name      String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  room    Room?    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([name, type, roomId, projectId])
}

model Project {
  id        String   @id @default(uuid())
  userId    String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  files     File[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
